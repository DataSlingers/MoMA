// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_moma_multi_rank
Rcpp::List cpp_moma_multi_rank(const arma::mat& X, const arma::vec& alpha_u, const arma::vec& alpha_v, const arma::mat& Omega_u, const arma::mat& Omega_v, const arma::vec& lambda_u, const arma::vec& lambda_v, const Rcpp::List& prox_arg_list_u, const Rcpp::List& prox_arg_list_v, double EPS, long MAX_ITER, double EPS_inner, long MAX_ITER_inner, std::string solver, int rank);
RcppExport SEXP _MoMA_cpp_moma_multi_rank(SEXP XSEXP, SEXP alpha_uSEXP, SEXP alpha_vSEXP, SEXP Omega_uSEXP, SEXP Omega_vSEXP, SEXP lambda_uSEXP, SEXP lambda_vSEXP, SEXP prox_arg_list_uSEXP, SEXP prox_arg_list_vSEXP, SEXP EPSSEXP, SEXP MAX_ITERSEXP, SEXP EPS_innerSEXP, SEXP MAX_ITER_innerSEXP, SEXP solverSEXP, SEXP rankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_u(alpha_uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_v(alpha_vSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_u(Omega_uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_v(Omega_vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_u(lambda_uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_v(lambda_vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prox_arg_list_u(prox_arg_list_uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prox_arg_list_v(prox_arg_list_vSEXP);
    Rcpp::traits::input_parameter< double >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< long >::type MAX_ITER(MAX_ITERSEXP);
    Rcpp::traits::input_parameter< double >::type EPS_inner(EPS_innerSEXP);
    Rcpp::traits::input_parameter< long >::type MAX_ITER_inner(MAX_ITER_innerSEXP);
    Rcpp::traits::input_parameter< std::string >::type solver(solverSEXP);
    Rcpp::traits::input_parameter< int >::type rank(rankSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_moma_multi_rank(X, alpha_u, alpha_v, Omega_u, Omega_v, lambda_u, lambda_v, prox_arg_list_u, prox_arg_list_v, EPS, MAX_ITER, EPS_inner, MAX_ITER_inner, solver, rank));
    return rcpp_result_gen;
END_RCPP
}
// cpp_moma_grid_search
Rcpp::List cpp_moma_grid_search(const arma::mat& X, const arma::vec& alpha_u, const arma::vec& alpha_v, const arma::mat& Omega_u, const arma::mat& Omega_v, const arma::vec& lambda_u, const arma::vec& lambda_v, const Rcpp::List& prox_arg_list_u, const Rcpp::List& prox_arg_list_v, double EPS, long MAX_ITER, double EPS_inner, long MAX_ITER_inner, std::string solver, int rank);
RcppExport SEXP _MoMA_cpp_moma_grid_search(SEXP XSEXP, SEXP alpha_uSEXP, SEXP alpha_vSEXP, SEXP Omega_uSEXP, SEXP Omega_vSEXP, SEXP lambda_uSEXP, SEXP lambda_vSEXP, SEXP prox_arg_list_uSEXP, SEXP prox_arg_list_vSEXP, SEXP EPSSEXP, SEXP MAX_ITERSEXP, SEXP EPS_innerSEXP, SEXP MAX_ITER_innerSEXP, SEXP solverSEXP, SEXP rankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_u(alpha_uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_v(alpha_vSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_u(Omega_uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_v(Omega_vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_u(lambda_uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_v(lambda_vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prox_arg_list_u(prox_arg_list_uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prox_arg_list_v(prox_arg_list_vSEXP);
    Rcpp::traits::input_parameter< double >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< long >::type MAX_ITER(MAX_ITERSEXP);
    Rcpp::traits::input_parameter< double >::type EPS_inner(EPS_innerSEXP);
    Rcpp::traits::input_parameter< long >::type MAX_ITER_inner(MAX_ITER_innerSEXP);
    Rcpp::traits::input_parameter< std::string >::type solver(solverSEXP);
    Rcpp::traits::input_parameter< int >::type rank(rankSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_moma_grid_search(X, alpha_u, alpha_v, Omega_u, Omega_v, lambda_u, lambda_v, prox_arg_list_u, prox_arg_list_v, EPS, MAX_ITER, EPS_inner, MAX_ITER_inner, solver, rank));
    return rcpp_result_gen;
END_RCPP
}
// cpp_moma_criterion_search
Rcpp::List cpp_moma_criterion_search(const arma::mat& X, const arma::vec& alpha_u, const arma::vec& alpha_v, const arma::mat& Omega_u, const arma::mat& Omega_v, const arma::vec& lambda_u, const arma::vec& lambda_v, const Rcpp::List& prox_arg_list_u, const Rcpp::List& prox_arg_list_v, double EPS, long MAX_ITER, double EPS_inner, long MAX_ITER_inner, std::string solver, int rank);
RcppExport SEXP _MoMA_cpp_moma_criterion_search(SEXP XSEXP, SEXP alpha_uSEXP, SEXP alpha_vSEXP, SEXP Omega_uSEXP, SEXP Omega_vSEXP, SEXP lambda_uSEXP, SEXP lambda_vSEXP, SEXP prox_arg_list_uSEXP, SEXP prox_arg_list_vSEXP, SEXP EPSSEXP, SEXP MAX_ITERSEXP, SEXP EPS_innerSEXP, SEXP MAX_ITER_innerSEXP, SEXP solverSEXP, SEXP rankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_u(alpha_uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_v(alpha_vSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_u(Omega_uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_v(Omega_vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_u(lambda_uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_v(lambda_vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prox_arg_list_u(prox_arg_list_uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prox_arg_list_v(prox_arg_list_vSEXP);
    Rcpp::traits::input_parameter< double >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< long >::type MAX_ITER(MAX_ITERSEXP);
    Rcpp::traits::input_parameter< double >::type EPS_inner(EPS_innerSEXP);
    Rcpp::traits::input_parameter< long >::type MAX_ITER_inner(MAX_ITER_innerSEXP);
    Rcpp::traits::input_parameter< std::string >::type solver(solverSEXP);
    Rcpp::traits::input_parameter< int >::type rank(rankSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_moma_criterion_search(X, alpha_u, alpha_v, Omega_u, Omega_v, lambda_u, lambda_v, prox_arg_list_u, prox_arg_list_v, EPS, MAX_ITER, EPS_inner, MAX_ITER_inner, solver, rank));
    return rcpp_result_gen;
END_RCPP
}
// cpp_multirank_BIC_grid_search
Rcpp::List cpp_multirank_BIC_grid_search(const arma::mat& X, const arma::vec& alpha_u, const arma::vec& alpha_v, const arma::mat& Omega_u, const arma::mat& Omega_v, const arma::vec& lambda_u, const arma::vec& lambda_v, const Rcpp::List& prox_arg_list_u, const Rcpp::List& prox_arg_list_v, double EPS, long MAX_ITER, double EPS_inner, long MAX_ITER_inner, std::string solver, int deflation_scheme, int select_scheme_alpha_u, int select_scheme_alpha_v, int select_scheme_lambda_u, int select_scheme_lambda_v, int max_bic_iter, int rank);
RcppExport SEXP _MoMA_cpp_multirank_BIC_grid_search(SEXP XSEXP, SEXP alpha_uSEXP, SEXP alpha_vSEXP, SEXP Omega_uSEXP, SEXP Omega_vSEXP, SEXP lambda_uSEXP, SEXP lambda_vSEXP, SEXP prox_arg_list_uSEXP, SEXP prox_arg_list_vSEXP, SEXP EPSSEXP, SEXP MAX_ITERSEXP, SEXP EPS_innerSEXP, SEXP MAX_ITER_innerSEXP, SEXP solverSEXP, SEXP deflation_schemeSEXP, SEXP select_scheme_alpha_uSEXP, SEXP select_scheme_alpha_vSEXP, SEXP select_scheme_lambda_uSEXP, SEXP select_scheme_lambda_vSEXP, SEXP max_bic_iterSEXP, SEXP rankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_u(alpha_uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_v(alpha_vSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_u(Omega_uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_v(Omega_vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_u(lambda_uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_v(lambda_vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prox_arg_list_u(prox_arg_list_uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prox_arg_list_v(prox_arg_list_vSEXP);
    Rcpp::traits::input_parameter< double >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< long >::type MAX_ITER(MAX_ITERSEXP);
    Rcpp::traits::input_parameter< double >::type EPS_inner(EPS_innerSEXP);
    Rcpp::traits::input_parameter< long >::type MAX_ITER_inner(MAX_ITER_innerSEXP);
    Rcpp::traits::input_parameter< std::string >::type solver(solverSEXP);
    Rcpp::traits::input_parameter< int >::type deflation_scheme(deflation_schemeSEXP);
    Rcpp::traits::input_parameter< int >::type select_scheme_alpha_u(select_scheme_alpha_uSEXP);
    Rcpp::traits::input_parameter< int >::type select_scheme_alpha_v(select_scheme_alpha_vSEXP);
    Rcpp::traits::input_parameter< int >::type select_scheme_lambda_u(select_scheme_lambda_uSEXP);
    Rcpp::traits::input_parameter< int >::type select_scheme_lambda_v(select_scheme_lambda_vSEXP);
    Rcpp::traits::input_parameter< int >::type max_bic_iter(max_bic_iterSEXP);
    Rcpp::traits::input_parameter< int >::type rank(rankSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_multirank_BIC_grid_search(X, alpha_u, alpha_v, Omega_u, Omega_v, lambda_u, lambda_v, prox_arg_list_u, prox_arg_list_v, EPS, MAX_ITER, EPS_inner, MAX_ITER_inner, solver, deflation_scheme, select_scheme_alpha_u, select_scheme_alpha_v, select_scheme_lambda_u, select_scheme_lambda_v, max_bic_iter, rank));
    return rcpp_result_gen;
END_RCPP
}
// cca
Rcpp::List cca(const arma::mat& X, const arma::mat& Y, const arma::vec& alpha_u, const arma::vec& alpha_v, const arma::mat& Omega_u, const arma::mat& Omega_v, const arma::vec& lambda_u, const arma::vec& lambda_v, const Rcpp::List& prox_arg_list_u, const Rcpp::List& prox_arg_list_v, double EPS, long MAX_ITER, double EPS_inner, long MAX_ITER_inner, std::string solver, int deflation_scheme, int select_scheme_alpha_u, int select_scheme_alpha_v, int select_scheme_lambda_u, int select_scheme_lambda_v, int max_bic_iter, int rank);
RcppExport SEXP _MoMA_cca(SEXP XSEXP, SEXP YSEXP, SEXP alpha_uSEXP, SEXP alpha_vSEXP, SEXP Omega_uSEXP, SEXP Omega_vSEXP, SEXP lambda_uSEXP, SEXP lambda_vSEXP, SEXP prox_arg_list_uSEXP, SEXP prox_arg_list_vSEXP, SEXP EPSSEXP, SEXP MAX_ITERSEXP, SEXP EPS_innerSEXP, SEXP MAX_ITER_innerSEXP, SEXP solverSEXP, SEXP deflation_schemeSEXP, SEXP select_scheme_alpha_uSEXP, SEXP select_scheme_alpha_vSEXP, SEXP select_scheme_lambda_uSEXP, SEXP select_scheme_lambda_vSEXP, SEXP max_bic_iterSEXP, SEXP rankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_u(alpha_uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_v(alpha_vSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_u(Omega_uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega_v(Omega_vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_u(lambda_uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_v(lambda_vSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prox_arg_list_u(prox_arg_list_uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prox_arg_list_v(prox_arg_list_vSEXP);
    Rcpp::traits::input_parameter< double >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< long >::type MAX_ITER(MAX_ITERSEXP);
    Rcpp::traits::input_parameter< double >::type EPS_inner(EPS_innerSEXP);
    Rcpp::traits::input_parameter< long >::type MAX_ITER_inner(MAX_ITER_innerSEXP);
    Rcpp::traits::input_parameter< std::string >::type solver(solverSEXP);
    Rcpp::traits::input_parameter< int >::type deflation_scheme(deflation_schemeSEXP);
    Rcpp::traits::input_parameter< int >::type select_scheme_alpha_u(select_scheme_alpha_uSEXP);
    Rcpp::traits::input_parameter< int >::type select_scheme_alpha_v(select_scheme_alpha_vSEXP);
    Rcpp::traits::input_parameter< int >::type select_scheme_lambda_u(select_scheme_lambda_uSEXP);
    Rcpp::traits::input_parameter< int >::type select_scheme_lambda_v(select_scheme_lambda_vSEXP);
    Rcpp::traits::input_parameter< int >::type max_bic_iter(max_bic_iterSEXP);
    Rcpp::traits::input_parameter< int >::type rank(rankSEXP);
    rcpp_result_gen = Rcpp::wrap(cca(X, Y, alpha_u, alpha_v, Omega_u, Omega_v, lambda_u, lambda_v, prox_arg_list_u, prox_arg_list_v, EPS, MAX_ITER, EPS_inner, MAX_ITER_inner, solver, deflation_scheme, select_scheme_alpha_u, select_scheme_alpha_v, select_scheme_lambda_u, select_scheme_lambda_v, max_bic_iter, rank));
    return rcpp_result_gen;
END_RCPP
}
// moma_set_logger_level_cpp
void moma_set_logger_level_cpp(int level);
RcppExport SEXP _MoMA_moma_set_logger_level_cpp(SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    moma_set_logger_level_cpp(level);
    return R_NilValue;
END_RCPP
}
// moma_get_logger_level_cpp
int moma_get_logger_level_cpp();
RcppExport SEXP _MoMA_moma_get_logger_level_cpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(moma_get_logger_level_cpp());
    return rcpp_result_gen;
END_RCPP
}
// moma_log_cpp
void moma_log_cpp(int level, Rcpp::StringVector x);
RcppExport SEXP _MoMA_moma_log_cpp(SEXP levelSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type x(xSEXP);
    moma_log_cpp(level, x);
    return R_NilValue;
END_RCPP
}
// l1tf_diff_mat
arma::mat l1tf_diff_mat(int m, int k);
RcppExport SEXP _MoMA_l1tf_diff_mat(SEXP mSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(l1tf_diff_mat(m, k));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_lasso
arma::vec test_prox_lasso(const arma::vec& x, double l);
RcppExport SEXP _MoMA_test_prox_lasso(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_lasso(x, l));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_nnlasso
arma::vec test_prox_nnlasso(const arma::vec& x, double l);
RcppExport SEXP _MoMA_test_prox_nnlasso(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_nnlasso(x, l));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_scad
arma::vec test_prox_scad(const arma::vec& x, double l, double gamma);
RcppExport SEXP _MoMA_test_prox_scad(SEXP xSEXP, SEXP lSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_scad(x, l, gamma));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_scadvec
arma::vec test_prox_scadvec(const arma::vec& x, double l, double gamma);
RcppExport SEXP _MoMA_test_prox_scadvec(SEXP xSEXP, SEXP lSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_scadvec(x, l, gamma));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_nnscad
arma::vec test_prox_nnscad(const arma::vec& x, double l, double gamma);
RcppExport SEXP _MoMA_test_prox_nnscad(SEXP xSEXP, SEXP lSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_nnscad(x, l, gamma));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_mcp
arma::vec test_prox_mcp(const arma::vec& x, double l, double gamma);
RcppExport SEXP _MoMA_test_prox_mcp(SEXP xSEXP, SEXP lSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_mcp(x, l, gamma));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_mcpvec
arma::vec test_prox_mcpvec(const arma::vec& x, double l, double gamma);
RcppExport SEXP _MoMA_test_prox_mcpvec(SEXP xSEXP, SEXP lSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_mcpvec(x, l, gamma));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_nnmcp
arma::vec test_prox_nnmcp(const arma::vec& x, double l, double gamma);
RcppExport SEXP _MoMA_test_prox_nnmcp(SEXP xSEXP, SEXP lSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_nnmcp(x, l, gamma));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_grplasso
arma::vec test_prox_grplasso(const arma::vec& x, const arma::vec& g, double l);
RcppExport SEXP _MoMA_test_prox_grplasso(SEXP xSEXP, SEXP gSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_grplasso(x, g, l));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_nngrplasso
arma::vec test_prox_nngrplasso(const arma::vec& x, const arma::vec& g, double l);
RcppExport SEXP _MoMA_test_prox_nngrplasso(SEXP xSEXP, SEXP gSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_nngrplasso(x, g, l));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_fusedlassopath
arma::vec test_prox_fusedlassopath(const arma::vec& x, double l);
RcppExport SEXP _MoMA_test_prox_fusedlassopath(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_fusedlassopath(x, l));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_fusedlassodp
arma::vec test_prox_fusedlassodp(const arma::vec& x, double l);
RcppExport SEXP _MoMA_test_prox_fusedlassodp(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_fusedlassodp(x, l));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_spfusedlasso
arma::vec test_prox_spfusedlasso(const arma::vec& x, double l, double lambda2);
RcppExport SEXP _MoMA_test_prox_spfusedlasso(SEXP xSEXP, SEXP lSEXP, SEXP lambda2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_spfusedlasso(x, l, lambda2));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_fusion
arma::vec test_prox_fusion(const arma::vec& x, double l, const arma::mat w, bool ADMM, bool acc, double prox_eps);
RcppExport SEXP _MoMA_test_prox_fusion(SEXP xSEXP, SEXP lSEXP, SEXP wSEXP, SEXP ADMMSEXP, SEXP accSEXP, SEXP prox_epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type ADMM(ADMMSEXP);
    Rcpp::traits::input_parameter< bool >::type acc(accSEXP);
    Rcpp::traits::input_parameter< double >::type prox_eps(prox_epsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_fusion(x, l, w, ADMM, acc, prox_eps));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_l1gf
arma::vec test_prox_l1gf(const arma::vec& x, double l, int k);
RcppExport SEXP _MoMA_test_prox_l1gf(SEXP xSEXP, SEXP lSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_l1gf(x, l, k));
    return rcpp_result_gen;
END_RCPP
}
// test_prox_slope
arma::vec test_prox_slope(const arma::vec& x, double l);
RcppExport SEXP _MoMA_test_prox_slope(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(test_prox_slope(x, l));
    return rcpp_result_gen;
END_RCPP
}
// test_df_orderedfusion
int test_df_orderedfusion(const arma::vec& x);
RcppExport SEXP _MoMA_test_df_orderedfusion(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_df_orderedfusion(x));
    return rcpp_result_gen;
END_RCPP
}
// test_df_spfusedlasso
int test_df_spfusedlasso(const arma::vec& x);
RcppExport SEXP _MoMA_test_df_spfusedlasso(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_df_spfusedlasso(x));
    return rcpp_result_gen;
END_RCPP
}
// test_df_l1gf
int test_df_l1gf(const arma::vec& x, int k);
RcppExport SEXP _MoMA_test_df_l1gf(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(test_df_l1gf(x, k));
    return rcpp_result_gen;
END_RCPP
}
// test_df_grplasso
int test_df_grplasso(const arma::vec& x, const arma::vec& g);
RcppExport SEXP _MoMA_test_df_grplasso(SEXP xSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(test_df_grplasso(x, g));
    return rcpp_result_gen;
END_RCPP
}
// test_BIC
double test_BIC(const arma::vec y, const arma::vec y_est, const std::string& algorithm_string, double i_alpha, const arma::mat& i_Omega, double i_lambda, Rcpp::List prox_arg_list, int dim, double i_EPS, int i_MAX_ITER);
RcppExport SEXP _MoMA_test_BIC(SEXP ySEXP, SEXP y_estSEXP, SEXP algorithm_stringSEXP, SEXP i_alphaSEXP, SEXP i_OmegaSEXP, SEXP i_lambdaSEXP, SEXP prox_arg_listSEXP, SEXP dimSEXP, SEXP i_EPSSEXP, SEXP i_MAX_ITERSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y_est(y_estSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type algorithm_string(algorithm_stringSEXP);
    Rcpp::traits::input_parameter< double >::type i_alpha(i_alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type i_Omega(i_OmegaSEXP);
    Rcpp::traits::input_parameter< double >::type i_lambda(i_lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type prox_arg_list(prox_arg_listSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< double >::type i_EPS(i_EPSSEXP);
    Rcpp::traits::input_parameter< int >::type i_MAX_ITER(i_MAX_ITERSEXP);
    rcpp_result_gen = Rcpp::wrap(test_BIC(y, y_est, algorithm_string, i_alpha, i_Omega, i_lambda, prox_arg_list, dim, i_EPS, i_MAX_ITER));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MoMA_cpp_moma_multi_rank", (DL_FUNC) &_MoMA_cpp_moma_multi_rank, 15},
    {"_MoMA_cpp_moma_grid_search", (DL_FUNC) &_MoMA_cpp_moma_grid_search, 15},
    {"_MoMA_cpp_moma_criterion_search", (DL_FUNC) &_MoMA_cpp_moma_criterion_search, 15},
    {"_MoMA_cpp_multirank_BIC_grid_search", (DL_FUNC) &_MoMA_cpp_multirank_BIC_grid_search, 21},
    {"_MoMA_cca", (DL_FUNC) &_MoMA_cca, 22},
    {"_MoMA_moma_set_logger_level_cpp", (DL_FUNC) &_MoMA_moma_set_logger_level_cpp, 1},
    {"_MoMA_moma_get_logger_level_cpp", (DL_FUNC) &_MoMA_moma_get_logger_level_cpp, 0},
    {"_MoMA_moma_log_cpp", (DL_FUNC) &_MoMA_moma_log_cpp, 2},
    {"_MoMA_l1tf_diff_mat", (DL_FUNC) &_MoMA_l1tf_diff_mat, 2},
    {"_MoMA_test_prox_lasso", (DL_FUNC) &_MoMA_test_prox_lasso, 2},
    {"_MoMA_test_prox_nnlasso", (DL_FUNC) &_MoMA_test_prox_nnlasso, 2},
    {"_MoMA_test_prox_scad", (DL_FUNC) &_MoMA_test_prox_scad, 3},
    {"_MoMA_test_prox_scadvec", (DL_FUNC) &_MoMA_test_prox_scadvec, 3},
    {"_MoMA_test_prox_nnscad", (DL_FUNC) &_MoMA_test_prox_nnscad, 3},
    {"_MoMA_test_prox_mcp", (DL_FUNC) &_MoMA_test_prox_mcp, 3},
    {"_MoMA_test_prox_mcpvec", (DL_FUNC) &_MoMA_test_prox_mcpvec, 3},
    {"_MoMA_test_prox_nnmcp", (DL_FUNC) &_MoMA_test_prox_nnmcp, 3},
    {"_MoMA_test_prox_grplasso", (DL_FUNC) &_MoMA_test_prox_grplasso, 3},
    {"_MoMA_test_prox_nngrplasso", (DL_FUNC) &_MoMA_test_prox_nngrplasso, 3},
    {"_MoMA_test_prox_fusedlassopath", (DL_FUNC) &_MoMA_test_prox_fusedlassopath, 2},
    {"_MoMA_test_prox_fusedlassodp", (DL_FUNC) &_MoMA_test_prox_fusedlassodp, 2},
    {"_MoMA_test_prox_spfusedlasso", (DL_FUNC) &_MoMA_test_prox_spfusedlasso, 3},
    {"_MoMA_test_prox_fusion", (DL_FUNC) &_MoMA_test_prox_fusion, 6},
    {"_MoMA_test_prox_l1gf", (DL_FUNC) &_MoMA_test_prox_l1gf, 3},
    {"_MoMA_test_prox_slope", (DL_FUNC) &_MoMA_test_prox_slope, 2},
    {"_MoMA_test_df_orderedfusion", (DL_FUNC) &_MoMA_test_df_orderedfusion, 1},
    {"_MoMA_test_df_spfusedlasso", (DL_FUNC) &_MoMA_test_df_spfusedlasso, 1},
    {"_MoMA_test_df_l1gf", (DL_FUNC) &_MoMA_test_df_l1gf, 2},
    {"_MoMA_test_df_grplasso", (DL_FUNC) &_MoMA_test_df_grplasso, 2},
    {"_MoMA_test_BIC", (DL_FUNC) &_MoMA_test_BIC, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_MoMA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
